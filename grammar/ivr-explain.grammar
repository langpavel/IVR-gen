GOON
  = (_ { window = global || window; window.module = null; window.errors = []; return true; }) code:START
    {
      return {
        errors: errors,
        code: code
      };
    }

START
  = _ s:(STATEMENT _)* { return s.map(function(x) { return x[0] }); }

STATEMENT
  = "module" __ id:ID { return "module " + (module = id); }
  / "section" __ id:ID
    {
      if (!module) {
        errors.push("section " + id + " is not in module context");
      }
      return "enter section " + id + " in " + module + " module";
    }
  / "on" __ context:("start" / "timeout" / ("hang" "up"? {return "hangup";} ) / "invalid") { return "switch context to " + context; }
  / "on" __ context:([0-9\*#]+) { return "switch context to " + context.join(''); }
  / "noop" { return; }
  / "label" __ label:ID { return "mark next instruction with label " + label }
  / "goto" __ "module" __ module:ID section:(_ ":" _ id:ID {return id; })?
    {
      return "goto module " + module + (section ? " section " + section : ' root');
    }
  / "goto" __
      section:ID? label:(_ ":" _ id:ID { return id; })?
    {
      return "goto " + (section ? "section " + section : "current section") +
        (label ? " on label " + label : "");
    }
  / "gosub" __ "module" __ module:ID _ ":" _ section:ID
    {
      return "gosub module " + module + " section " + section;
    }
  / "gosub" __
      section:ID? label:(_ ":" _ id:ID { return id; })?
    {
      return "gosub " + (section ? "section " + section : "current section") +
        (label ? " on label " + label : "");
    }
  / "include" __ path:PATH { return "include file at " + path }

  / "wait" __ TIME

  / ("say" __)? str:STRING { return "say: " + str; }


/*
  / "macro" __ ID __ ARGUMENT_LIST STATEMENT_WITH_PREFIX+ "end" (__ "macro" (__ ID)?)?
  / "sub" __ ID __ STATEMENT+ "end" (__ "sub" (__ ID)?)?
  / "goto" __ ID ( _ ":" _ ID)?
  / "say" _ (STRING _)+
  / "command" _ INTERPOLACED_STRING
  / "set"
  / "if" EXPRESSION "then" __ STATEMENT
*/

/* whitespaces */

__ = SPACE+ { return; }

_ = SPACE* { return; }

SPACE = (" " / "\n")

TIME = sec:([0-9]+) ( _ "s" ("ec" ("ond" "s"? )? )? )? { return parseInt(sec.join('')); }

/* String nebude mit auto concatenaci */
STRING = "'" content:[^']* "'" { return content.join(''); }
/* TODO */

PATH = "PATH"
EXPR = "EXPR"
ID = first:[a-zA-Z] next:[a-zA-Z0-9]* { next.unshift(first); return next.join(''); }