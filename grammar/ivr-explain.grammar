GOON
  = (_ {
      window = global || window;
      window.module = null;
      window.errors = [];
      window.indent = function(x) {
        if (Array.isArray(x))
          x = '\n' + x.join('\n')
        return x.replace(/\n/g, '\n  ') + '\n';
      };
      return true; }) code:START
    {
      return {
        errors: errors,
        code: code
      };
    }

START
  = s:ROOT_STATEMENT+ { return s; }

ROOT_STATEMENT
  = "module" __ id:ID __
    {
      return "MODULE " + (module = id);
    }
  / "section" __ id:ID __
    {
      if (!module) {
        errors.push( "section " + id + " is not in module context" );
      }
      return "ENTER SECTION " + id + " in " + module + " module";
    }
  / "on" __ context:( "start" / "timeout" / ( "hang" ( _ "up" )? {return "hangup";} ) / "invalid" ) __
    {
      return "SWITCH CONTEXT TO " + context;
    }
  / "on" __ context:([0-9\*#]+) __
    {
      return "SWITCH CONTEXT TO " + context.join('');
    }
  / s:STATEMENT+
    {
      return indent(s);
    }

STATEMENT
  = "if" __ expr:EXPR __
    "then" __ th:STATEMENT*
    elsif:(( "else" _ "if" / "elsif" ) __ e:EXPR __ "then" __ s:STATEMENT* {return [e,s]; } )*
    els:( "else" __ s:STATEMENT* {return s; } )? "end" _ "if" __
    {
      return "if (" + expr + ") then {" + indent(th) + "}" +
        (elsif.length ? elsif.reduce(function(x, elsif) {
          return x + ' else if (' + elsif[0] + ') then (' + indent(elsif[1]) + ')';
        }, '') : '') +
        (els ? " else {" + els.join(', ') + "}" : '');
    }
  / "while" __ expr:EXPR __ ( "do" / "then" ) __ th:STATEMENT* "end" _ "while" __
    {
      return "while (" + expr + ") do {" + th.join(', ') + "}";
    }
  / "repeat" __ times:CONST_INT ( "times" __ )? s:STATEMENT* "end" _ "repeat" __
    {
      return "repeat " + times + "x {" + indent(s) + "}";
    }
  / SIMPLE_STATEMENT

SIMPLE_STATEMENT
  = "noop" __ { return "Drink coffee"; }
  / "label" __ label:ID __ { return "mark next instruction with label " + label }
  / "goto" __ "module" __ module:ID section:(_ ":" _ id:ID {return id; })? __
    {
      return "goto module " + module + (section ? " section " + section : ' root');
    }
  / "goto" __ section:ID? label:(_ ":" _ id:ID { return id; })? __
    {
      return "goto " + (section ? "section " + section : "current section" ) +
        (label ? " on label " + label : "" );
    }
  / "gosub" __ "module" __ module:ID _ ":" _ section:ID __
    {
      return "gosub module " + module + " section " + section;
    }
  / "gosub" __ section:ID? label:(_ ":" _ id:ID { return id; })? __
    {
      return "gosub " + (section ? "section " + section : "current section" ) +
        (label ? " on label " + label : "" );
    }
  / "include" __ path:PATH __ { return "include file at " + path }

  / "wait" __ t:TIME __ { return "wait " + t + " seconds"; }

  / ( "say" __ )? str:STRING __ { return "say " + JSON.stringify(str); }



/*
  / "macro" __ ID __ ARGUMENT_LIST STATEMENT_WITH_PREFIX+ "end" (__ "macro" (__ ID)?)?
  / "sub" __ ID __ STATEMENT+ "end" (__ "sub" (__ ID)?)?
  / "goto" __ ID ( _ ":" _ ID)?
  / "say" _ (STRING _)+
  / "command" _ INTERPOLACED_STRING
  / "set"
*/


CONST_INT "const_int"
  = num:[0-9]+ __ { return parseInt(num.join(''), 10); }

EXPR
  = "EXPR" { return "EXPR"; }
  / "true" { return true; }
  / "false" { return false; }


TIME = sec:([0-9]+) ( _ "s" ( "ec" ( "ond" "s"? )? )? )? { return parseInt(sec.join('')); }
PATH = "PATH"
ID = first:[a-zA-Z] next:[a-zA-Z0-9]* { next.unshift(first); return next.join(''); }
/* String nebude mit auto concatenaci */
STRING = "'" content:[^']* "'" { return content.join(''); }

/* whitespaces */

__ "whitespace"
  = SPACE+ { return ''; }

_ "whitespace"
  = SPACE* { return ''; }

SPACE = ( " " / "\t" / "\n" )
