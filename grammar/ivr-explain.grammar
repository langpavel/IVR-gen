GOON
  = (_ {
      window = global || window;
      window.module = null;
      window.errors = [];
      window.consts = {};
      window.indent = function(x) {
        if (Array.isArray(x))
          x = '\n' + x.join('\n');
        return x.replace(/\n/g, '\n  ') + '\n';
      };
      return true; }) code:START
    {
      return {
        errors: errors,
        code: code
      };
    }

START
  = s:ROOT_STATEMENT+ { return s; }

ROOT_STATEMENT
  = "module" __ id:ID __
    {
      return "MODULE " + (module = id);
    }
  / "section" __ id:ID __
    {
      if (!module) {
        errors.push( "section " + id + " is not in module context" );
      }
      return "ENTER SECTION " + id + " in " + module + " module";
    }
  / "on" __ context:( "start" / "timeout" / ( "hang" ( _ "up" )? {return "hangup";} ) / "invalid" ) __
    {
      return "SWITCH CONTEXT TO " + context;
    }
  / "on" __ context:([0-9\*#]+) __
    {
      return "SWITCH CONTEXT TO " + context.join('');
    }
  / "macro" __ label:ID __ s:STATEMENT* "end" _ "macro" __
    {
      return "MACRO " + label + ":" + indent(s) + "END MACRO";
    }
  / "sub" __ label:ID __ s:STATEMENT* "end" _ "sub" __
    {
      return "SUB " + label + ":" + indent(s) + "RETURN";
    }
  / "const" __ id:ID _ "=" _ v:CONST_ADDITION
    {
      if (typeof window.consts[id] !== 'undefined') {
        errors.push("Refefined constant '" + id + "'");
      } else {
        consts[id] = v;
        return "define constant " + id + " = " + v;
      }
    }
  / s:STATEMENT+
    {
      return indent(s);
    }

STATEMENT
  = "if" __ expr:EXPR __
    ("then" __)? th:STATEMENT*
    elsif:(( "else" _ "if" / "elsif" ) __ e:EXPR __ "then" __ s:STATEMENT* {return [e,s]; } )*
    els:( "else" __ s:STATEMENT* {return s; } )? "end" _ "if" __
    {
      return "if (" + expr + ") then {" + indent(th) + "}" +
        (elsif.length ? elsif.reduce(function(x, elsif) {
          return x + ' else if (' + elsif[0] + ') then (' + indent(elsif[1]) + ')';
        }, '') : '') +
        (els ? " else {" + indent(els) + "}" : '');
    }
  / "while" __ expr:EXPR __ ( "do" __ / "then" __ )? th:STATEMENT* "end" _ "while" __
    {
      return "while (" + expr + ") do {" + indent(th) + "}";
    }
  / "repeat" __ times:CONST_ADDITION ( "times" __ )? s:STATEMENT* "end" _ "repeat" __
    {
      return "repeat " + times + "x {" + indent(s) + "}";
    }
  / "switch" __ e1:EXPR __
    cases:( ( "case" / "when" ) __ e:EXPR
      ( __ "then" __ / _ ":" _ ) s:SIMPLE_STATEMENT* c:( "continue" / "break" ) __
      { return [e,s,c]; } )*
    els:( "else" ( _ ":" )? __ s:SIMPLE_STATEMENT+ { return s; } )?
    "end" _ "switch" __
    {
      return "switch (" + e1 + ")" +
        indent(cases.map(function(x) {
          return "case (" + x[0] + "):" + indent(x[1]) + '  ' + x[2];
        })) +
        "end switch";
    }
  / LABELED_STATEMENT


LABELED_STATEMENT
  = "label" __ label:ID __ s:SIMPLE_STATEMENT { return "label " + label + ": " + s; }
  / SIMPLE_STATEMENT


SIMPLE_STATEMENT
  = "noop" __ { return "Drink coffee"; }
  / "goto" __ "module" __ module:ID section:(_ ":" _ id:ID {return id; })? __
    {
      return "goto module " + module + (section ? " section " + section : ' root');
    }
  / "goto" __ section:ID? label:(_ ":" _ id:ID { return id; })? __
    {
      return "goto " + (section ? "section " + section : "current section" ) +
        (label ? " on label " + label : "" );
    }
  / "gosub" __ "module" __ module:ID _ ":" _ section:ID __
    {
      return "gosub module " + module + " section " + section;
    }
  / "gosub" __ section:ID? label:(_ ":" _ id:ID { return id; })? __
    {
      return "gosub " + (section ? "section " + section : "current section" ) +
        (label ? " on label " + label : "" );
    }
  / "include" __ path:PATH __ { return "include file at " + path }

  / "wait" __ t:TIME __
    {
      return "wait " + t + " seconds";
    }

  / "record" __ path:( "into" __ path:FILE_EXPR __ { return path; } )?
    {
      return "start recording" + (path ? " into " + path : '');
    }

  / "input" (_ "into")? __ id:ID __
    {
      return "record input into " + id;
    }

  / "AGI" __ p:PATH _ args:ARG_CALL_LIST_OPT
    {
      return "call AGI script at '" + p + "'";
    }

  / "music" _ "on" _ "hold" ( __ "at" )? __ p:PATH __
    {
      return "MusicOnHold at '" + p + "'";
    }

  / "say" _ ":" _ words:[^\n]+ __
    {
      return "say " + JSON.stringify(words.join(''));
    }

  / "hang" ( _ "up" )? __
    {
      return "HANG UP!"
    }

  / ( "say" __ )? str:STRING __
    {
      return "say " + JSON.stringify(str);
    }

/*
  / "macro" __ ID __ ARGUMENT_LIST STATEMENT_WITH_PREFIX+ "end" (__ "macro" (__ ID)?)?
  / "sub" __ ID __ STATEMENT+ "end" (__ "sub" (__ ID)?)?
  / "goto" __ ID ( _ ":" _ ID)?
  / "say" _ (STRING _)+
  / "command" _ INTERPOLACED_STRING
  / "set"
*/

ARG_CALL_LIST_OPT
  = "(" _  ")" _
  / { return []; }

EXPR
  = "EXPR" { return "EXPR"; }
  / "true" { return true; }
  / "false" { return false; }

CONST_ADDITION
  = left:CONST_MULT _ tail:([+-] CONST_MULT)* {
      tail.forEach(function(value) {
        // value[0] is sign
        // value[1] is CONST_MULT rule result (our value)
        left += (value[0] == '-') ? -value[1] : value[1];
      });
      return left;
    }


CONST_MULT
  = left:CONST_UNARY _ tail:([*/%] CONST_UNARY)* {
      tail.forEach(function(value) {
        // value[0] is sign
        // value[2] is CONST_MULT rule result (our value)
        switch(value[0]) {
          case "*":
            left *= value[1];
            break;
          case "/":
            left /= value[1];
            break;
          case "%":
            left %= value[1];
            break;
        }
      });
      return left;
    }


CONST_UNARY
  = sign:[+-]? _ val:CONST_PRIMARY _ {
      return sign == '-' ? -val : val;
    }


CONST_PRIMARY
  = CONST_INT
  / STRING
  / id:ID
    {
      if (typeof window.consts[id] !== 'undefined') {
        return consts[id]
      } else {
        errors.push("Undefefined constant '" + id + "'");
      }
    }
  / "(" CONST_ADDITION:CONST_ADDITION ")"
    { return CONST_ADDITION; }


CONST_INT "CONST_INT"
  = digits:[0-9]+ { return parseInt(digits.join(""), 10); }


TIME = sec:([0-9]+) ( _ "s" ( "ec" ( "ond" "s"? )? )? )? { return parseInt(sec.join('')); }

FILE_EXPR
  = "FILE_EXPR"
  / PATH

PATH = "PATH"

ID = first:[a-zA-Z_] next:[_a-zA-Z0-9]* { next.unshift(first); return next.join(''); }

/* String nebude mit auto concatenaci */
STRING "STRING"
  = "'" content:[^']* "'" { return content.join(''); }
  / '"' content:[^"]* '"' { return content.join(''); }

/* whitespaces */

__ "whitespace"
  = SPACE+ { return ''; }

_ "whitespace"
  = SPACE* { return ''; }

SPACE = ( " " / "\t" / "\n" )

