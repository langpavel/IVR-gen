module.exports = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "GOON": parse_GOON,
        "START": parse_START,
        "ROOT_STATEMENT": parse_ROOT_STATEMENT,
        "STATEMENT": parse_STATEMENT,
        "LABELED_STATEMENT": parse_LABELED_STATEMENT,
        "SIMPLE_STATEMENT": parse_SIMPLE_STATEMENT,
        "CONST_INT": parse_CONST_INT,
        "EXPR": parse_EXPR,
        "TIME": parse_TIME,
        "FILE_EXPR": parse_FILE_EXPR,
        "PATH": parse_PATH,
        "ID": parse_ID,
        "STRING": parse_STRING,
        "__": parse___,
        "_": parse__,
        "SPACE": parse_SPACE
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "GOON";
      }
      
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_GOON() {
        var result0, result1;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        result0 = parse__();
        if (result0 !== null) {
          result0 = (function(offset) {
              window = global || window;
              window.module = null;
              window.errors = [];
              window.indent = function(x) {
                if (Array.isArray(x))
                  x = '\n' + x.join('\n');
                return x.replace(/\n/g, '\n  ') + '\n';
              };
              return true; })(pos2);
        }
        if (result0 === null) {
          pos = pos2;
        }
        if (result0 !== null) {
          result1 = parse_START();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, code) {
              return {
                errors: errors,
                code: code
              };
            })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_START() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result1 = parse_ROOT_STATEMENT();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_ROOT_STATEMENT();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, s) { return s; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_ROOT_STATEMENT() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1, pos2, pos3, pos4;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 6) === "module") {
          result0 = "module";
          pos += 6;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"module\"");
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result2 = parse_ID();
            if (result2 !== null) {
              result3 = parse___();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, id) {
              return "MODULE " + (module = id);
            })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.substr(pos, 7) === "section") {
            result0 = "section";
            pos += 7;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"section\"");
            }
          }
          if (result0 !== null) {
            result1 = parse___();
            if (result1 !== null) {
              result2 = parse_ID();
              if (result2 !== null) {
                result3 = parse___();
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, id) {
                if (!module) {
                  errors.push( "section " + id + " is not in module context" );
                }
                return "ENTER SECTION " + id + " in " + module + " module";
              })(pos0, result0[2]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            if (input.substr(pos, 2) === "on") {
              result0 = "on";
              pos += 2;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"on\"");
              }
            }
            if (result0 !== null) {
              result1 = parse___();
              if (result1 !== null) {
                if (input.substr(pos, 5) === "start") {
                  result2 = "start";
                  pos += 5;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"start\"");
                  }
                }
                if (result2 === null) {
                  if (input.substr(pos, 7) === "timeout") {
                    result2 = "timeout";
                    pos += 7;
                  } else {
                    result2 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"timeout\"");
                    }
                  }
                  if (result2 === null) {
                    pos2 = pos;
                    pos3 = pos;
                    if (input.substr(pos, 4) === "hang") {
                      result2 = "hang";
                      pos += 4;
                    } else {
                      result2 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"hang\"");
                      }
                    }
                    if (result2 !== null) {
                      pos4 = pos;
                      result3 = parse__();
                      if (result3 !== null) {
                        if (input.substr(pos, 2) === "up") {
                          result4 = "up";
                          pos += 2;
                        } else {
                          result4 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"up\"");
                          }
                        }
                        if (result4 !== null) {
                          result3 = [result3, result4];
                        } else {
                          result3 = null;
                          pos = pos4;
                        }
                      } else {
                        result3 = null;
                        pos = pos4;
                      }
                      result3 = result3 !== null ? result3 : "";
                      if (result3 !== null) {
                        result2 = [result2, result3];
                      } else {
                        result2 = null;
                        pos = pos3;
                      }
                    } else {
                      result2 = null;
                      pos = pos3;
                    }
                    if (result2 !== null) {
                      result2 = (function(offset) {return "hangup";})(pos2);
                    }
                    if (result2 === null) {
                      pos = pos2;
                    }
                    if (result2 === null) {
                      if (input.substr(pos, 7) === "invalid") {
                        result2 = "invalid";
                        pos += 7;
                      } else {
                        result2 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"invalid\"");
                        }
                      }
                    }
                  }
                }
                if (result2 !== null) {
                  result3 = parse___();
                  if (result3 !== null) {
                    result0 = [result0, result1, result2, result3];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, context) {
                  return "SWITCH CONTEXT TO " + context;
                })(pos0, result0[2]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              if (input.substr(pos, 2) === "on") {
                result0 = "on";
                pos += 2;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"on\"");
                }
              }
              if (result0 !== null) {
                result1 = parse___();
                if (result1 !== null) {
                  if (/^[0-9*#]/.test(input.charAt(pos))) {
                    result3 = input.charAt(pos);
                    pos++;
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("[0-9*#]");
                    }
                  }
                  if (result3 !== null) {
                    result2 = [];
                    while (result3 !== null) {
                      result2.push(result3);
                      if (/^[0-9*#]/.test(input.charAt(pos))) {
                        result3 = input.charAt(pos);
                        pos++;
                      } else {
                        result3 = null;
                        if (reportFailures === 0) {
                          matchFailed("[0-9*#]");
                        }
                      }
                    }
                  } else {
                    result2 = null;
                  }
                  if (result2 !== null) {
                    result3 = parse___();
                    if (result3 !== null) {
                      result0 = [result0, result1, result2, result3];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(offset, context) {
                    return "SWITCH CONTEXT TO " + context.join('');
                  })(pos0, result0[2]);
              }
              if (result0 === null) {
                pos = pos0;
              }
              if (result0 === null) {
                pos0 = pos;
                pos1 = pos;
                if (input.substr(pos, 5) === "macro") {
                  result0 = "macro";
                  pos += 5;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"macro\"");
                  }
                }
                if (result0 !== null) {
                  result1 = parse___();
                  if (result1 !== null) {
                    result2 = parse_ID();
                    if (result2 !== null) {
                      result3 = parse___();
                      if (result3 !== null) {
                        result4 = [];
                        result5 = parse_STATEMENT();
                        while (result5 !== null) {
                          result4.push(result5);
                          result5 = parse_STATEMENT();
                        }
                        if (result4 !== null) {
                          if (input.substr(pos, 3) === "end") {
                            result5 = "end";
                            pos += 3;
                          } else {
                            result5 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"end\"");
                            }
                          }
                          if (result5 !== null) {
                            result6 = parse__();
                            if (result6 !== null) {
                              if (input.substr(pos, 5) === "macro") {
                                result7 = "macro";
                                pos += 5;
                              } else {
                                result7 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"macro\"");
                                }
                              }
                              if (result7 !== null) {
                                result8 = parse___();
                                if (result8 !== null) {
                                  result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
                if (result0 !== null) {
                  result0 = (function(offset, label, s) {
                      return "MACRO " + label + ":" + indent(s) + "END MACRO";
                    })(pos0, result0[2], result0[4]);
                }
                if (result0 === null) {
                  pos = pos0;
                }
                if (result0 === null) {
                  pos0 = pos;
                  pos1 = pos;
                  if (input.substr(pos, 3) === "sub") {
                    result0 = "sub";
                    pos += 3;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"sub\"");
                    }
                  }
                  if (result0 !== null) {
                    result1 = parse___();
                    if (result1 !== null) {
                      result2 = parse_ID();
                      if (result2 !== null) {
                        result3 = parse___();
                        if (result3 !== null) {
                          result4 = [];
                          result5 = parse_STATEMENT();
                          while (result5 !== null) {
                            result4.push(result5);
                            result5 = parse_STATEMENT();
                          }
                          if (result4 !== null) {
                            if (input.substr(pos, 3) === "end") {
                              result5 = "end";
                              pos += 3;
                            } else {
                              result5 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"end\"");
                              }
                            }
                            if (result5 !== null) {
                              result6 = parse__();
                              if (result6 !== null) {
                                if (input.substr(pos, 3) === "sub") {
                                  result7 = "sub";
                                  pos += 3;
                                } else {
                                  result7 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"sub\"");
                                  }
                                }
                                if (result7 !== null) {
                                  result8 = parse___();
                                  if (result8 !== null) {
                                    result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                  if (result0 !== null) {
                    result0 = (function(offset, label, s) {
                        return "SUB " + label + ":" + indent(s) + "RETURN";
                      })(pos0, result0[2], result0[4]);
                  }
                  if (result0 === null) {
                    pos = pos0;
                  }
                  if (result0 === null) {
                    pos0 = pos;
                    result1 = parse_STATEMENT();
                    if (result1 !== null) {
                      result0 = [];
                      while (result1 !== null) {
                        result0.push(result1);
                        result1 = parse_STATEMENT();
                      }
                    } else {
                      result0 = null;
                    }
                    if (result0 !== null) {
                      result0 = (function(offset, s) {
                          return indent(s);
                        })(pos0, result0);
                    }
                    if (result0 === null) {
                      pos = pos0;
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_STATEMENT() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14;
        var pos0, pos1, pos2, pos3, pos4;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 2) === "if") {
          result0 = "if";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"if\"");
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result2 = parse_EXPR();
            if (result2 !== null) {
              result3 = parse___();
              if (result3 !== null) {
                pos2 = pos;
                if (input.substr(pos, 4) === "then") {
                  result4 = "then";
                  pos += 4;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"then\"");
                  }
                }
                if (result4 !== null) {
                  result5 = parse___();
                  if (result5 !== null) {
                    result4 = [result4, result5];
                  } else {
                    result4 = null;
                    pos = pos2;
                  }
                } else {
                  result4 = null;
                  pos = pos2;
                }
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse_STATEMENT();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_STATEMENT();
                  }
                  if (result5 !== null) {
                    result6 = [];
                    pos2 = pos;
                    pos3 = pos;
                    pos4 = pos;
                    if (input.substr(pos, 4) === "else") {
                      result7 = "else";
                      pos += 4;
                    } else {
                      result7 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"else\"");
                      }
                    }
                    if (result7 !== null) {
                      result8 = parse__();
                      if (result8 !== null) {
                        if (input.substr(pos, 2) === "if") {
                          result9 = "if";
                          pos += 2;
                        } else {
                          result9 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"if\"");
                          }
                        }
                        if (result9 !== null) {
                          result7 = [result7, result8, result9];
                        } else {
                          result7 = null;
                          pos = pos4;
                        }
                      } else {
                        result7 = null;
                        pos = pos4;
                      }
                    } else {
                      result7 = null;
                      pos = pos4;
                    }
                    if (result7 === null) {
                      if (input.substr(pos, 5) === "elsif") {
                        result7 = "elsif";
                        pos += 5;
                      } else {
                        result7 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"elsif\"");
                        }
                      }
                    }
                    if (result7 !== null) {
                      result8 = parse___();
                      if (result8 !== null) {
                        result9 = parse_EXPR();
                        if (result9 !== null) {
                          result10 = parse___();
                          if (result10 !== null) {
                            if (input.substr(pos, 4) === "then") {
                              result11 = "then";
                              pos += 4;
                            } else {
                              result11 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"then\"");
                              }
                            }
                            if (result11 !== null) {
                              result12 = parse___();
                              if (result12 !== null) {
                                result13 = [];
                                result14 = parse_STATEMENT();
                                while (result14 !== null) {
                                  result13.push(result14);
                                  result14 = parse_STATEMENT();
                                }
                                if (result13 !== null) {
                                  result7 = [result7, result8, result9, result10, result11, result12, result13];
                                } else {
                                  result7 = null;
                                  pos = pos3;
                                }
                              } else {
                                result7 = null;
                                pos = pos3;
                              }
                            } else {
                              result7 = null;
                              pos = pos3;
                            }
                          } else {
                            result7 = null;
                            pos = pos3;
                          }
                        } else {
                          result7 = null;
                          pos = pos3;
                        }
                      } else {
                        result7 = null;
                        pos = pos3;
                      }
                    } else {
                      result7 = null;
                      pos = pos3;
                    }
                    if (result7 !== null) {
                      result7 = (function(offset, e, s) {return [e,s]; })(pos2, result7[2], result7[6]);
                    }
                    if (result7 === null) {
                      pos = pos2;
                    }
                    while (result7 !== null) {
                      result6.push(result7);
                      pos2 = pos;
                      pos3 = pos;
                      pos4 = pos;
                      if (input.substr(pos, 4) === "else") {
                        result7 = "else";
                        pos += 4;
                      } else {
                        result7 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"else\"");
                        }
                      }
                      if (result7 !== null) {
                        result8 = parse__();
                        if (result8 !== null) {
                          if (input.substr(pos, 2) === "if") {
                            result9 = "if";
                            pos += 2;
                          } else {
                            result9 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"if\"");
                            }
                          }
                          if (result9 !== null) {
                            result7 = [result7, result8, result9];
                          } else {
                            result7 = null;
                            pos = pos4;
                          }
                        } else {
                          result7 = null;
                          pos = pos4;
                        }
                      } else {
                        result7 = null;
                        pos = pos4;
                      }
                      if (result7 === null) {
                        if (input.substr(pos, 5) === "elsif") {
                          result7 = "elsif";
                          pos += 5;
                        } else {
                          result7 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"elsif\"");
                          }
                        }
                      }
                      if (result7 !== null) {
                        result8 = parse___();
                        if (result8 !== null) {
                          result9 = parse_EXPR();
                          if (result9 !== null) {
                            result10 = parse___();
                            if (result10 !== null) {
                              if (input.substr(pos, 4) === "then") {
                                result11 = "then";
                                pos += 4;
                              } else {
                                result11 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"then\"");
                                }
                              }
                              if (result11 !== null) {
                                result12 = parse___();
                                if (result12 !== null) {
                                  result13 = [];
                                  result14 = parse_STATEMENT();
                                  while (result14 !== null) {
                                    result13.push(result14);
                                    result14 = parse_STATEMENT();
                                  }
                                  if (result13 !== null) {
                                    result7 = [result7, result8, result9, result10, result11, result12, result13];
                                  } else {
                                    result7 = null;
                                    pos = pos3;
                                  }
                                } else {
                                  result7 = null;
                                  pos = pos3;
                                }
                              } else {
                                result7 = null;
                                pos = pos3;
                              }
                            } else {
                              result7 = null;
                              pos = pos3;
                            }
                          } else {
                            result7 = null;
                            pos = pos3;
                          }
                        } else {
                          result7 = null;
                          pos = pos3;
                        }
                      } else {
                        result7 = null;
                        pos = pos3;
                      }
                      if (result7 !== null) {
                        result7 = (function(offset, e, s) {return [e,s]; })(pos2, result7[2], result7[6]);
                      }
                      if (result7 === null) {
                        pos = pos2;
                      }
                    }
                    if (result6 !== null) {
                      pos2 = pos;
                      pos3 = pos;
                      if (input.substr(pos, 4) === "else") {
                        result7 = "else";
                        pos += 4;
                      } else {
                        result7 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"else\"");
                        }
                      }
                      if (result7 !== null) {
                        result8 = parse___();
                        if (result8 !== null) {
                          result9 = [];
                          result10 = parse_STATEMENT();
                          while (result10 !== null) {
                            result9.push(result10);
                            result10 = parse_STATEMENT();
                          }
                          if (result9 !== null) {
                            result7 = [result7, result8, result9];
                          } else {
                            result7 = null;
                            pos = pos3;
                          }
                        } else {
                          result7 = null;
                          pos = pos3;
                        }
                      } else {
                        result7 = null;
                        pos = pos3;
                      }
                      if (result7 !== null) {
                        result7 = (function(offset, s) {return s; })(pos2, result7[2]);
                      }
                      if (result7 === null) {
                        pos = pos2;
                      }
                      result7 = result7 !== null ? result7 : "";
                      if (result7 !== null) {
                        if (input.substr(pos, 3) === "end") {
                          result8 = "end";
                          pos += 3;
                        } else {
                          result8 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"end\"");
                          }
                        }
                        if (result8 !== null) {
                          result9 = parse__();
                          if (result9 !== null) {
                            if (input.substr(pos, 2) === "if") {
                              result10 = "if";
                              pos += 2;
                            } else {
                              result10 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"if\"");
                              }
                            }
                            if (result10 !== null) {
                              result11 = parse___();
                              if (result11 !== null) {
                                result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11];
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr, th, elsif, els) {
              return "if (" + expr + ") then {" + indent(th) + "}" +
                (elsif.length ? elsif.reduce(function(x, elsif) {
                  return x + ' else if (' + elsif[0] + ') then (' + indent(elsif[1]) + ')';
                }, '') : '') +
                (els ? " else {" + indent(els) + "}" : '');
            })(pos0, result0[2], result0[5], result0[6], result0[7]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.substr(pos, 5) === "while") {
            result0 = "while";
            pos += 5;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"while\"");
            }
          }
          if (result0 !== null) {
            result1 = parse___();
            if (result1 !== null) {
              result2 = parse_EXPR();
              if (result2 !== null) {
                result3 = parse___();
                if (result3 !== null) {
                  pos2 = pos;
                  if (input.substr(pos, 2) === "do") {
                    result4 = "do";
                    pos += 2;
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"do\"");
                    }
                  }
                  if (result4 !== null) {
                    result5 = parse___();
                    if (result5 !== null) {
                      result4 = [result4, result5];
                    } else {
                      result4 = null;
                      pos = pos2;
                    }
                  } else {
                    result4 = null;
                    pos = pos2;
                  }
                  if (result4 === null) {
                    pos2 = pos;
                    if (input.substr(pos, 4) === "then") {
                      result4 = "then";
                      pos += 4;
                    } else {
                      result4 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"then\"");
                      }
                    }
                    if (result4 !== null) {
                      result5 = parse___();
                      if (result5 !== null) {
                        result4 = [result4, result5];
                      } else {
                        result4 = null;
                        pos = pos2;
                      }
                    } else {
                      result4 = null;
                      pos = pos2;
                    }
                  }
                  result4 = result4 !== null ? result4 : "";
                  if (result4 !== null) {
                    result5 = [];
                    result6 = parse_STATEMENT();
                    while (result6 !== null) {
                      result5.push(result6);
                      result6 = parse_STATEMENT();
                    }
                    if (result5 !== null) {
                      if (input.substr(pos, 3) === "end") {
                        result6 = "end";
                        pos += 3;
                      } else {
                        result6 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"end\"");
                        }
                      }
                      if (result6 !== null) {
                        result7 = parse__();
                        if (result7 !== null) {
                          if (input.substr(pos, 5) === "while") {
                            result8 = "while";
                            pos += 5;
                          } else {
                            result8 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"while\"");
                            }
                          }
                          if (result8 !== null) {
                            result9 = parse___();
                            if (result9 !== null) {
                              result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9];
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, expr, th) {
                return "while (" + expr + ") do {" + indent(th) + "}";
              })(pos0, result0[2], result0[5]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            if (input.substr(pos, 6) === "repeat") {
              result0 = "repeat";
              pos += 6;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"repeat\"");
              }
            }
            if (result0 !== null) {
              result1 = parse___();
              if (result1 !== null) {
                result2 = parse_CONST_INT();
                if (result2 !== null) {
                  pos2 = pos;
                  if (input.substr(pos, 5) === "times") {
                    result3 = "times";
                    pos += 5;
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"times\"");
                    }
                  }
                  if (result3 !== null) {
                    result4 = parse___();
                    if (result4 !== null) {
                      result3 = [result3, result4];
                    } else {
                      result3 = null;
                      pos = pos2;
                    }
                  } else {
                    result3 = null;
                    pos = pos2;
                  }
                  result3 = result3 !== null ? result3 : "";
                  if (result3 !== null) {
                    result4 = [];
                    result5 = parse_STATEMENT();
                    while (result5 !== null) {
                      result4.push(result5);
                      result5 = parse_STATEMENT();
                    }
                    if (result4 !== null) {
                      if (input.substr(pos, 3) === "end") {
                        result5 = "end";
                        pos += 3;
                      } else {
                        result5 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"end\"");
                        }
                      }
                      if (result5 !== null) {
                        result6 = parse__();
                        if (result6 !== null) {
                          if (input.substr(pos, 6) === "repeat") {
                            result7 = "repeat";
                            pos += 6;
                          } else {
                            result7 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"repeat\"");
                            }
                          }
                          if (result7 !== null) {
                            result8 = parse___();
                            if (result8 !== null) {
                              result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, times, s) {
                  return "repeat " + times + "x {" + indent(s) + "}";
                })(pos0, result0[2], result0[4]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              if (input.substr(pos, 6) === "switch") {
                result0 = "switch";
                pos += 6;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"switch\"");
                }
              }
              if (result0 !== null) {
                result1 = parse___();
                if (result1 !== null) {
                  result2 = parse_EXPR();
                  if (result2 !== null) {
                    result3 = parse___();
                    if (result3 !== null) {
                      result4 = [];
                      pos2 = pos;
                      pos3 = pos;
                      if (input.substr(pos, 4) === "case") {
                        result5 = "case";
                        pos += 4;
                      } else {
                        result5 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"case\"");
                        }
                      }
                      if (result5 === null) {
                        if (input.substr(pos, 4) === "when") {
                          result5 = "when";
                          pos += 4;
                        } else {
                          result5 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"when\"");
                          }
                        }
                      }
                      if (result5 !== null) {
                        result6 = parse___();
                        if (result6 !== null) {
                          result7 = parse_EXPR();
                          if (result7 !== null) {
                            pos4 = pos;
                            result8 = parse___();
                            if (result8 !== null) {
                              if (input.substr(pos, 4) === "then") {
                                result9 = "then";
                                pos += 4;
                              } else {
                                result9 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"then\"");
                                }
                              }
                              if (result9 !== null) {
                                result10 = parse___();
                                if (result10 !== null) {
                                  result8 = [result8, result9, result10];
                                } else {
                                  result8 = null;
                                  pos = pos4;
                                }
                              } else {
                                result8 = null;
                                pos = pos4;
                              }
                            } else {
                              result8 = null;
                              pos = pos4;
                            }
                            if (result8 === null) {
                              pos4 = pos;
                              result8 = parse__();
                              if (result8 !== null) {
                                if (input.charCodeAt(pos) === 58) {
                                  result9 = ":";
                                  pos++;
                                } else {
                                  result9 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\":\"");
                                  }
                                }
                                if (result9 !== null) {
                                  result10 = parse__();
                                  if (result10 !== null) {
                                    result8 = [result8, result9, result10];
                                  } else {
                                    result8 = null;
                                    pos = pos4;
                                  }
                                } else {
                                  result8 = null;
                                  pos = pos4;
                                }
                              } else {
                                result8 = null;
                                pos = pos4;
                              }
                            }
                            if (result8 !== null) {
                              result9 = [];
                              result10 = parse_SIMPLE_STATEMENT();
                              while (result10 !== null) {
                                result9.push(result10);
                                result10 = parse_SIMPLE_STATEMENT();
                              }
                              if (result9 !== null) {
                                if (input.substr(pos, 8) === "continue") {
                                  result10 = "continue";
                                  pos += 8;
                                } else {
                                  result10 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"continue\"");
                                  }
                                }
                                if (result10 === null) {
                                  if (input.substr(pos, 5) === "break") {
                                    result10 = "break";
                                    pos += 5;
                                  } else {
                                    result10 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"break\"");
                                    }
                                  }
                                }
                                if (result10 !== null) {
                                  result11 = parse___();
                                  if (result11 !== null) {
                                    result5 = [result5, result6, result7, result8, result9, result10, result11];
                                  } else {
                                    result5 = null;
                                    pos = pos3;
                                  }
                                } else {
                                  result5 = null;
                                  pos = pos3;
                                }
                              } else {
                                result5 = null;
                                pos = pos3;
                              }
                            } else {
                              result5 = null;
                              pos = pos3;
                            }
                          } else {
                            result5 = null;
                            pos = pos3;
                          }
                        } else {
                          result5 = null;
                          pos = pos3;
                        }
                      } else {
                        result5 = null;
                        pos = pos3;
                      }
                      if (result5 !== null) {
                        result5 = (function(offset, e, s, c) { return [e,s,c]; })(pos2, result5[2], result5[4], result5[5]);
                      }
                      if (result5 === null) {
                        pos = pos2;
                      }
                      while (result5 !== null) {
                        result4.push(result5);
                        pos2 = pos;
                        pos3 = pos;
                        if (input.substr(pos, 4) === "case") {
                          result5 = "case";
                          pos += 4;
                        } else {
                          result5 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"case\"");
                          }
                        }
                        if (result5 === null) {
                          if (input.substr(pos, 4) === "when") {
                            result5 = "when";
                            pos += 4;
                          } else {
                            result5 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"when\"");
                            }
                          }
                        }
                        if (result5 !== null) {
                          result6 = parse___();
                          if (result6 !== null) {
                            result7 = parse_EXPR();
                            if (result7 !== null) {
                              pos4 = pos;
                              result8 = parse___();
                              if (result8 !== null) {
                                if (input.substr(pos, 4) === "then") {
                                  result9 = "then";
                                  pos += 4;
                                } else {
                                  result9 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"then\"");
                                  }
                                }
                                if (result9 !== null) {
                                  result10 = parse___();
                                  if (result10 !== null) {
                                    result8 = [result8, result9, result10];
                                  } else {
                                    result8 = null;
                                    pos = pos4;
                                  }
                                } else {
                                  result8 = null;
                                  pos = pos4;
                                }
                              } else {
                                result8 = null;
                                pos = pos4;
                              }
                              if (result8 === null) {
                                pos4 = pos;
                                result8 = parse__();
                                if (result8 !== null) {
                                  if (input.charCodeAt(pos) === 58) {
                                    result9 = ":";
                                    pos++;
                                  } else {
                                    result9 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\":\"");
                                    }
                                  }
                                  if (result9 !== null) {
                                    result10 = parse__();
                                    if (result10 !== null) {
                                      result8 = [result8, result9, result10];
                                    } else {
                                      result8 = null;
                                      pos = pos4;
                                    }
                                  } else {
                                    result8 = null;
                                    pos = pos4;
                                  }
                                } else {
                                  result8 = null;
                                  pos = pos4;
                                }
                              }
                              if (result8 !== null) {
                                result9 = [];
                                result10 = parse_SIMPLE_STATEMENT();
                                while (result10 !== null) {
                                  result9.push(result10);
                                  result10 = parse_SIMPLE_STATEMENT();
                                }
                                if (result9 !== null) {
                                  if (input.substr(pos, 8) === "continue") {
                                    result10 = "continue";
                                    pos += 8;
                                  } else {
                                    result10 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"continue\"");
                                    }
                                  }
                                  if (result10 === null) {
                                    if (input.substr(pos, 5) === "break") {
                                      result10 = "break";
                                      pos += 5;
                                    } else {
                                      result10 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\"break\"");
                                      }
                                    }
                                  }
                                  if (result10 !== null) {
                                    result11 = parse___();
                                    if (result11 !== null) {
                                      result5 = [result5, result6, result7, result8, result9, result10, result11];
                                    } else {
                                      result5 = null;
                                      pos = pos3;
                                    }
                                  } else {
                                    result5 = null;
                                    pos = pos3;
                                  }
                                } else {
                                  result5 = null;
                                  pos = pos3;
                                }
                              } else {
                                result5 = null;
                                pos = pos3;
                              }
                            } else {
                              result5 = null;
                              pos = pos3;
                            }
                          } else {
                            result5 = null;
                            pos = pos3;
                          }
                        } else {
                          result5 = null;
                          pos = pos3;
                        }
                        if (result5 !== null) {
                          result5 = (function(offset, e, s, c) { return [e,s,c]; })(pos2, result5[2], result5[4], result5[5]);
                        }
                        if (result5 === null) {
                          pos = pos2;
                        }
                      }
                      if (result4 !== null) {
                        pos2 = pos;
                        pos3 = pos;
                        if (input.substr(pos, 4) === "else") {
                          result5 = "else";
                          pos += 4;
                        } else {
                          result5 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"else\"");
                          }
                        }
                        if (result5 !== null) {
                          result6 = parse___();
                          if (result6 !== null) {
                            result8 = parse_SIMPLE_STATEMENT();
                            if (result8 !== null) {
                              result7 = [];
                              while (result8 !== null) {
                                result7.push(result8);
                                result8 = parse_SIMPLE_STATEMENT();
                              }
                            } else {
                              result7 = null;
                            }
                            if (result7 !== null) {
                              result5 = [result5, result6, result7];
                            } else {
                              result5 = null;
                              pos = pos3;
                            }
                          } else {
                            result5 = null;
                            pos = pos3;
                          }
                        } else {
                          result5 = null;
                          pos = pos3;
                        }
                        if (result5 !== null) {
                          result5 = (function(offset, s) { return s; })(pos2, result5[2]);
                        }
                        if (result5 === null) {
                          pos = pos2;
                        }
                        result5 = result5 !== null ? result5 : "";
                        if (result5 !== null) {
                          if (input.substr(pos, 3) === "end") {
                            result6 = "end";
                            pos += 3;
                          } else {
                            result6 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"end\"");
                            }
                          }
                          if (result6 !== null) {
                            result7 = parse__();
                            if (result7 !== null) {
                              if (input.substr(pos, 6) === "switch") {
                                result8 = "switch";
                                pos += 6;
                              } else {
                                result8 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"switch\"");
                                }
                              }
                              if (result8 !== null) {
                                result9 = parse___();
                                if (result9 !== null) {
                                  result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9];
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(offset, e1, cases, els) {
                    return "switch (" + e1 + ")" +
                      indent(cases.map(function(x) {
                        return "case (" + x[0] + "):" + indent(x[1]) + '  ' + x[2];
                      })) +
                      "end switch";
                  })(pos0, result0[2], result0[4], result0[5]);
              }
              if (result0 === null) {
                pos = pos0;
              }
              if (result0 === null) {
                result0 = parse_LABELED_STATEMENT();
              }
            }
          }
        }
        return result0;
      }
      
      function parse_LABELED_STATEMENT() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 5) === "label") {
          result0 = "label";
          pos += 5;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"label\"");
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result2 = parse_ID();
            if (result2 !== null) {
              result3 = parse___();
              if (result3 !== null) {
                result4 = parse_SIMPLE_STATEMENT();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, label, s) { return "label " + label + ": " + s; })(pos0, result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          result0 = parse_SIMPLE_STATEMENT();
        }
        return result0;
      }
      
      function parse_SIMPLE_STATEMENT() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 4) === "noop") {
          result0 = "noop";
          pos += 4;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"noop\"");
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) { return "Drink coffee"; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.substr(pos, 4) === "goto") {
            result0 = "goto";
            pos += 4;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"goto\"");
            }
          }
          if (result0 !== null) {
            result1 = parse___();
            if (result1 !== null) {
              if (input.substr(pos, 6) === "module") {
                result2 = "module";
                pos += 6;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"module\"");
                }
              }
              if (result2 !== null) {
                result3 = parse___();
                if (result3 !== null) {
                  result4 = parse_ID();
                  if (result4 !== null) {
                    pos2 = pos;
                    pos3 = pos;
                    result5 = parse__();
                    if (result5 !== null) {
                      if (input.charCodeAt(pos) === 58) {
                        result6 = ":";
                        pos++;
                      } else {
                        result6 = null;
                        if (reportFailures === 0) {
                          matchFailed("\":\"");
                        }
                      }
                      if (result6 !== null) {
                        result7 = parse__();
                        if (result7 !== null) {
                          result8 = parse_ID();
                          if (result8 !== null) {
                            result5 = [result5, result6, result7, result8];
                          } else {
                            result5 = null;
                            pos = pos3;
                          }
                        } else {
                          result5 = null;
                          pos = pos3;
                        }
                      } else {
                        result5 = null;
                        pos = pos3;
                      }
                    } else {
                      result5 = null;
                      pos = pos3;
                    }
                    if (result5 !== null) {
                      result5 = (function(offset, id) {return id; })(pos2, result5[3]);
                    }
                    if (result5 === null) {
                      pos = pos2;
                    }
                    result5 = result5 !== null ? result5 : "";
                    if (result5 !== null) {
                      result6 = parse___();
                      if (result6 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, module, section) {
                return "goto module " + module + (section ? " section " + section : ' root');
              })(pos0, result0[4], result0[5]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            if (input.substr(pos, 4) === "goto") {
              result0 = "goto";
              pos += 4;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"goto\"");
              }
            }
            if (result0 !== null) {
              result1 = parse___();
              if (result1 !== null) {
                result2 = parse_ID();
                result2 = result2 !== null ? result2 : "";
                if (result2 !== null) {
                  pos2 = pos;
                  pos3 = pos;
                  result3 = parse__();
                  if (result3 !== null) {
                    if (input.charCodeAt(pos) === 58) {
                      result4 = ":";
                      pos++;
                    } else {
                      result4 = null;
                      if (reportFailures === 0) {
                        matchFailed("\":\"");
                      }
                    }
                    if (result4 !== null) {
                      result5 = parse__();
                      if (result5 !== null) {
                        result6 = parse_ID();
                        if (result6 !== null) {
                          result3 = [result3, result4, result5, result6];
                        } else {
                          result3 = null;
                          pos = pos3;
                        }
                      } else {
                        result3 = null;
                        pos = pos3;
                      }
                    } else {
                      result3 = null;
                      pos = pos3;
                    }
                  } else {
                    result3 = null;
                    pos = pos3;
                  }
                  if (result3 !== null) {
                    result3 = (function(offset, id) { return id; })(pos2, result3[3]);
                  }
                  if (result3 === null) {
                    pos = pos2;
                  }
                  result3 = result3 !== null ? result3 : "";
                  if (result3 !== null) {
                    result4 = parse___();
                    if (result4 !== null) {
                      result0 = [result0, result1, result2, result3, result4];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, section, label) {
                  return "goto " + (section ? "section " + section : "current section" ) +
                    (label ? " on label " + label : "" );
                })(pos0, result0[2], result0[3]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              if (input.substr(pos, 5) === "gosub") {
                result0 = "gosub";
                pos += 5;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"gosub\"");
                }
              }
              if (result0 !== null) {
                result1 = parse___();
                if (result1 !== null) {
                  if (input.substr(pos, 6) === "module") {
                    result2 = "module";
                    pos += 6;
                  } else {
                    result2 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"module\"");
                    }
                  }
                  if (result2 !== null) {
                    result3 = parse___();
                    if (result3 !== null) {
                      result4 = parse_ID();
                      if (result4 !== null) {
                        result5 = parse__();
                        if (result5 !== null) {
                          if (input.charCodeAt(pos) === 58) {
                            result6 = ":";
                            pos++;
                          } else {
                            result6 = null;
                            if (reportFailures === 0) {
                              matchFailed("\":\"");
                            }
                          }
                          if (result6 !== null) {
                            result7 = parse__();
                            if (result7 !== null) {
                              result8 = parse_ID();
                              if (result8 !== null) {
                                result9 = parse___();
                                if (result9 !== null) {
                                  result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9];
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(offset, module, section) {
                    return "gosub module " + module + " section " + section;
                  })(pos0, result0[4], result0[8]);
              }
              if (result0 === null) {
                pos = pos0;
              }
              if (result0 === null) {
                pos0 = pos;
                pos1 = pos;
                if (input.substr(pos, 5) === "gosub") {
                  result0 = "gosub";
                  pos += 5;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"gosub\"");
                  }
                }
                if (result0 !== null) {
                  result1 = parse___();
                  if (result1 !== null) {
                    result2 = parse_ID();
                    result2 = result2 !== null ? result2 : "";
                    if (result2 !== null) {
                      pos2 = pos;
                      pos3 = pos;
                      result3 = parse__();
                      if (result3 !== null) {
                        if (input.charCodeAt(pos) === 58) {
                          result4 = ":";
                          pos++;
                        } else {
                          result4 = null;
                          if (reportFailures === 0) {
                            matchFailed("\":\"");
                          }
                        }
                        if (result4 !== null) {
                          result5 = parse__();
                          if (result5 !== null) {
                            result6 = parse_ID();
                            if (result6 !== null) {
                              result3 = [result3, result4, result5, result6];
                            } else {
                              result3 = null;
                              pos = pos3;
                            }
                          } else {
                            result3 = null;
                            pos = pos3;
                          }
                        } else {
                          result3 = null;
                          pos = pos3;
                        }
                      } else {
                        result3 = null;
                        pos = pos3;
                      }
                      if (result3 !== null) {
                        result3 = (function(offset, id) { return id; })(pos2, result3[3]);
                      }
                      if (result3 === null) {
                        pos = pos2;
                      }
                      result3 = result3 !== null ? result3 : "";
                      if (result3 !== null) {
                        result4 = parse___();
                        if (result4 !== null) {
                          result0 = [result0, result1, result2, result3, result4];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
                if (result0 !== null) {
                  result0 = (function(offset, section, label) {
                      return "gosub " + (section ? "section " + section : "current section" ) +
                        (label ? " on label " + label : "" );
                    })(pos0, result0[2], result0[3]);
                }
                if (result0 === null) {
                  pos = pos0;
                }
                if (result0 === null) {
                  pos0 = pos;
                  pos1 = pos;
                  if (input.substr(pos, 7) === "include") {
                    result0 = "include";
                    pos += 7;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"include\"");
                    }
                  }
                  if (result0 !== null) {
                    result1 = parse___();
                    if (result1 !== null) {
                      result2 = parse_PATH();
                      if (result2 !== null) {
                        result3 = parse___();
                        if (result3 !== null) {
                          result0 = [result0, result1, result2, result3];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                  if (result0 !== null) {
                    result0 = (function(offset, path) { return "include file at " + path })(pos0, result0[2]);
                  }
                  if (result0 === null) {
                    pos = pos0;
                  }
                  if (result0 === null) {
                    pos0 = pos;
                    pos1 = pos;
                    if (input.substr(pos, 4) === "wait") {
                      result0 = "wait";
                      pos += 4;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"wait\"");
                      }
                    }
                    if (result0 !== null) {
                      result1 = parse___();
                      if (result1 !== null) {
                        result2 = parse_TIME();
                        if (result2 !== null) {
                          result3 = parse___();
                          if (result3 !== null) {
                            result0 = [result0, result1, result2, result3];
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                    if (result0 !== null) {
                      result0 = (function(offset, t) {
                          return "wait " + t + " seconds";
                        })(pos0, result0[2]);
                    }
                    if (result0 === null) {
                      pos = pos0;
                    }
                    if (result0 === null) {
                      pos0 = pos;
                      pos1 = pos;
                      if (input.substr(pos, 6) === "record") {
                        result0 = "record";
                        pos += 6;
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"record\"");
                        }
                      }
                      if (result0 !== null) {
                        result1 = parse___();
                        if (result1 !== null) {
                          pos2 = pos;
                          pos3 = pos;
                          if (input.substr(pos, 4) === "into") {
                            result2 = "into";
                            pos += 4;
                          } else {
                            result2 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"into\"");
                            }
                          }
                          if (result2 !== null) {
                            result3 = parse___();
                            if (result3 !== null) {
                              result4 = parse_FILE_EXPR();
                              if (result4 !== null) {
                                result5 = parse___();
                                if (result5 !== null) {
                                  result2 = [result2, result3, result4, result5];
                                } else {
                                  result2 = null;
                                  pos = pos3;
                                }
                              } else {
                                result2 = null;
                                pos = pos3;
                              }
                            } else {
                              result2 = null;
                              pos = pos3;
                            }
                          } else {
                            result2 = null;
                            pos = pos3;
                          }
                          if (result2 !== null) {
                            result2 = (function(offset, path) { return path; })(pos2, result2[2]);
                          }
                          if (result2 === null) {
                            pos = pos2;
                          }
                          result2 = result2 !== null ? result2 : "";
                          if (result2 !== null) {
                            result0 = [result0, result1, result2];
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                      if (result0 !== null) {
                        result0 = (function(offset, path) {
                            return "start recording" + (path ? " into " + path : '');
                          })(pos0, result0[2]);
                      }
                      if (result0 === null) {
                        pos = pos0;
                      }
                      if (result0 === null) {
                        pos0 = pos;
                        pos1 = pos;
                        if (input.substr(pos, 5) === "input") {
                          result0 = "input";
                          pos += 5;
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"input\"");
                          }
                        }
                        if (result0 !== null) {
                          pos2 = pos;
                          result1 = parse__();
                          if (result1 !== null) {
                            if (input.substr(pos, 4) === "into") {
                              result2 = "into";
                              pos += 4;
                            } else {
                              result2 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"into\"");
                              }
                            }
                            if (result2 !== null) {
                              result1 = [result1, result2];
                            } else {
                              result1 = null;
                              pos = pos2;
                            }
                          } else {
                            result1 = null;
                            pos = pos2;
                          }
                          result1 = result1 !== null ? result1 : "";
                          if (result1 !== null) {
                            result2 = parse___();
                            if (result2 !== null) {
                              result3 = parse_ID();
                              if (result3 !== null) {
                                result4 = parse___();
                                if (result4 !== null) {
                                  result0 = [result0, result1, result2, result3, result4];
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                        if (result0 !== null) {
                          result0 = (function(offset, id) {
                              return "record input into " + id;
                            })(pos0, result0[3]);
                        }
                        if (result0 === null) {
                          pos = pos0;
                        }
                        if (result0 === null) {
                          pos0 = pos;
                          pos1 = pos;
                          if (input.substr(pos, 3) === "say") {
                            result0 = "say";
                            pos += 3;
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"say\"");
                            }
                          }
                          if (result0 !== null) {
                            result1 = parse__();
                            if (result1 !== null) {
                              if (input.charCodeAt(pos) === 58) {
                                result2 = ":";
                                pos++;
                              } else {
                                result2 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\":\"");
                                }
                              }
                              if (result2 !== null) {
                                result3 = parse__();
                                if (result3 !== null) {
                                  if (/^[^\n]/.test(input.charAt(pos))) {
                                    result5 = input.charAt(pos);
                                    pos++;
                                  } else {
                                    result5 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("[^\\n]");
                                    }
                                  }
                                  if (result5 !== null) {
                                    result4 = [];
                                    while (result5 !== null) {
                                      result4.push(result5);
                                      if (/^[^\n]/.test(input.charAt(pos))) {
                                        result5 = input.charAt(pos);
                                        pos++;
                                      } else {
                                        result5 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("[^\\n]");
                                        }
                                      }
                                    }
                                  } else {
                                    result4 = null;
                                  }
                                  if (result4 !== null) {
                                    result5 = parse___();
                                    if (result5 !== null) {
                                      result0 = [result0, result1, result2, result3, result4, result5];
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                          if (result0 !== null) {
                            result0 = (function(offset, words) {
                                return "say " + JSON.stringify(words.join(''));
                              })(pos0, result0[4]);
                          }
                          if (result0 === null) {
                            pos = pos0;
                          }
                          if (result0 === null) {
                            pos0 = pos;
                            pos1 = pos;
                            if (input.substr(pos, 4) === "hang") {
                              result0 = "hang";
                              pos += 4;
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"hang\"");
                              }
                            }
                            if (result0 !== null) {
                              pos2 = pos;
                              result1 = parse__();
                              if (result1 !== null) {
                                if (input.substr(pos, 2) === "up") {
                                  result2 = "up";
                                  pos += 2;
                                } else {
                                  result2 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"up\"");
                                  }
                                }
                                if (result2 !== null) {
                                  result1 = [result1, result2];
                                } else {
                                  result1 = null;
                                  pos = pos2;
                                }
                              } else {
                                result1 = null;
                                pos = pos2;
                              }
                              result1 = result1 !== null ? result1 : "";
                              if (result1 !== null) {
                                result2 = parse___();
                                if (result2 !== null) {
                                  result0 = [result0, result1, result2];
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                            if (result0 !== null) {
                              result0 = (function(offset) {
                                  return "HANG UP!"
                                })(pos0);
                            }
                            if (result0 === null) {
                              pos = pos0;
                            }
                            if (result0 === null) {
                              pos0 = pos;
                              pos1 = pos;
                              pos2 = pos;
                              if (input.substr(pos, 3) === "say") {
                                result0 = "say";
                                pos += 3;
                              } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"say\"");
                                }
                              }
                              if (result0 !== null) {
                                result1 = parse___();
                                if (result1 !== null) {
                                  result0 = [result0, result1];
                                } else {
                                  result0 = null;
                                  pos = pos2;
                                }
                              } else {
                                result0 = null;
                                pos = pos2;
                              }
                              result0 = result0 !== null ? result0 : "";
                              if (result0 !== null) {
                                result1 = parse_STRING();
                                if (result1 !== null) {
                                  result2 = parse___();
                                  if (result2 !== null) {
                                    result0 = [result0, result1, result2];
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                              if (result0 !== null) {
                                result0 = (function(offset, str) {
                                    return "say " + JSON.stringify(str);
                                  })(pos0, result0[1]);
                              }
                              if (result0 === null) {
                                pos = pos0;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_CONST_INT() {
        var result0, result1;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        if (/^[0-9]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[0-9]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, num) { return parseInt(num.join(''), 10); })(pos0, result0[0]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("const_int");
        }
        return result0;
      }
      
      function parse_EXPR() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.substr(pos, 4) === "EXPR") {
          result0 = "EXPR";
          pos += 4;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"EXPR\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) { return "EXPR"; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          if (input.substr(pos, 4) === "true") {
            result0 = "true";
            pos += 4;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"true\"");
            }
          }
          if (result0 !== null) {
            result0 = (function(offset) { return true; })(pos0);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            if (input.substr(pos, 5) === "false") {
              result0 = "false";
              pos += 5;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"false\"");
              }
            }
            if (result0 !== null) {
              result0 = (function(offset) { return false; })(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
          }
        }
        return result0;
      }
      
      function parse_TIME() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2, pos3, pos4;
        
        pos0 = pos;
        pos1 = pos;
        if (/^[0-9]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[0-9]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          pos2 = pos;
          result1 = parse__();
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 115) {
              result2 = "s";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"s\"");
              }
            }
            if (result2 !== null) {
              pos3 = pos;
              if (input.substr(pos, 2) === "ec") {
                result3 = "ec";
                pos += 2;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"ec\"");
                }
              }
              if (result3 !== null) {
                pos4 = pos;
                if (input.substr(pos, 3) === "ond") {
                  result4 = "ond";
                  pos += 3;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"ond\"");
                  }
                }
                if (result4 !== null) {
                  if (input.charCodeAt(pos) === 115) {
                    result5 = "s";
                    pos++;
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"s\"");
                    }
                  }
                  result5 = result5 !== null ? result5 : "";
                  if (result5 !== null) {
                    result4 = [result4, result5];
                  } else {
                    result4 = null;
                    pos = pos4;
                  }
                } else {
                  result4 = null;
                  pos = pos4;
                }
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = pos3;
                }
              } else {
                result3 = null;
                pos = pos3;
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result1 = [result1, result2, result3];
              } else {
                result1 = null;
                pos = pos2;
              }
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, sec) { return parseInt(sec.join('')); })(pos0, result0[0]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_FILE_EXPR() {
        var result0;
        
        if (input.substr(pos, 9) === "FILE_EXPR") {
          result0 = "FILE_EXPR";
          pos += 9;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"FILE_EXPR\"");
          }
        }
        if (result0 === null) {
          result0 = parse_PATH();
        }
        return result0;
      }
      
      function parse_PATH() {
        var result0;
        
        if (input.substr(pos, 4) === "PATH") {
          result0 = "PATH";
          pos += 4;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"PATH\"");
          }
        }
        return result0;
      }
      
      function parse_ID() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (/^[a-zA-Z_]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[a-zA-Z_]");
          }
        }
        if (result0 !== null) {
          result1 = [];
          if (/^[_a-zA-Z0-9]/.test(input.charAt(pos))) {
            result2 = input.charAt(pos);
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[_a-zA-Z0-9]");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[_a-zA-Z0-9]/.test(input.charAt(pos))) {
              result2 = input.charAt(pos);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[_a-zA-Z0-9]");
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, first, next) { next.unshift(first); return next.join(''); })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_STRING() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 39) {
          result0 = "'";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"'\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          if (/^[^']/.test(input.charAt(pos))) {
            result2 = input.charAt(pos);
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[^']");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[^']/.test(input.charAt(pos))) {
              result2 = input.charAt(pos);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[^']");
              }
            }
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 39) {
              result2 = "'";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"'\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, content) { return content.join(''); })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse___() {
        var result0, result1;
        var pos0;
        
        reportFailures++;
        pos0 = pos;
        result1 = parse_SPACE();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_SPACE();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset) { return ''; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("whitespace");
        }
        return result0;
      }
      
      function parse__() {
        var result0, result1;
        var pos0;
        
        reportFailures++;
        pos0 = pos;
        result0 = [];
        result1 = parse_SPACE();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_SPACE();
        }
        if (result0 !== null) {
          result0 = (function(offset) { return ''; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("whitespace");
        }
        return result0;
      }
      
      function parse_SPACE() {
        var result0;
        
        if (input.charCodeAt(pos) === 32) {
          result0 = " ";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\" \"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos) === 9) {
            result0 = "\t";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\t\"");
            }
          }
          if (result0 === null) {
            if (input.charCodeAt(pos) === 10) {
              result0 = "\n";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\n\"");
              }
            }
          }
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
          var ch = input.charAt(i);
          if (ch === "\n") {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var offset = Math.max(pos, rightmostFailuresPos);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = computeErrorPosition();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
